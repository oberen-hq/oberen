// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["mongoDb"]
}

generator typegraphql {
  provider           = "typegraphql-prisma"
  output             = "../src/resolver-types"
}

enum OauthConnectionService {
  github
  google
  discord
  twitter
  facebook
  apple
  instagram
  linkedin
  local
}

enum AttachmentType {
  image
  video
  job
  organization
  post
  shift
  other
}

enum BugReportSeverity {
  catastrophic
  critical
  high
  medium
  low
  info
}

enum Role {
  USER
  ADMIN
}

enum PostType {
  post
  job
  organization
  shift
  article
  feedback
  poll
}

model User {
  id        String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  username  String   @unique
  email     String   @unique
  UserRole  Role     @default(value: USER)

  // Profile

  profile   UserProfile @relation("UserProfileRelation", fields: [profileId], references: [id])
  profileId String      @db.ObjectId

  // Posts

  posts         Post[]        @relation("UserOwnedPostsRelation")
  likedPosts    Post[]        @relation("UserLikedPostsRelation")
  likedComments PostComment[] @relation("UserLikedCommentsRelation")
  Post          Post?         @relation(fields: [postId], references: [id])
  postId        String?       @db.ObjectId
  PostComment   PostComment[]
}

model UserProfile {
  id        String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
  updatedAt DateTime @updatedAt
  user      User?    @relation("UserProfileRelation")
  avatarUrl String
  bio       String
}

model Post {
  id          String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
  title       String
  description String?
  type        PostType

  // Likes and Comments

  likers   User[]
  comments PostComment[]

  // TODO: Attachments and labels

  // Creator

  creator   User   @relation("UserOwnedPostsRelation", fields: [creatorId], references: [id])
  creatorId String @db.ObjectId

  // Created at and Updated at

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation("UserLikedPostsRelation", fields: [userId], references: [id])
  userId    String?  @db.ObjectId
}

model PostComment {
  id   String @id @default(dbgenerated()) @map("_id") @db.ObjectId
  body String

  // Creator

  creator   User   @relation(fields: [creatorId], references: [id])
  creatorId String @db.ObjectId

  post      Post     @relation(fields: [postId], references: [id])
  postId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  edited    Boolean  @default(false)
  likers    User[]   @relation("UserLikedCommentsRelation")
  likes     Int      @default(0)
}
