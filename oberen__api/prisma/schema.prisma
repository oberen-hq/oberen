// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "../src/resolver-types"
}

enum ConnectionService {
  github
  google
  discord
  twitter
  facebook
  apple
  instagram
  linkedin
  local
}

enum AttachmentType {
  image
  video
  organization
  post
  other
}

enum BugReportSeverity {
  catastrophic
  critical
  high
  medium
  low
  info
}

enum ErrorType {
  internal
  authentication
  timeout
  unavailable
}

enum Role {
  user
  staff
  admin
}

enum Status {
  online
  idle
  dnd
  other
  offline
}

enum PostType {
  post
  job
  organization
  shift
  article
  feedback
  poll
}

enum RequestType {
  bugReport
  userReport
  featureRequest
  ticket
}

enum ReportStatus {
  pending
  recieved
  rejected
  accepted
}

model Attachment {
  id        String         @id @default(uuid())
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  url       String
  type      AttachmentType
  post      Post?          @relation(fields: [postId], references: [id])
  postId    String?
}

model Error {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  type        ErrorType
  route       String    @default("/")
  description String
  user        User      @relation(fields: [userId], references: [id])
  userId      String
}

model Hashtag {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @unique
  uses      BigInt?  @default(0)
  creator   User     @relation(fields: [creatorId], references: [id])
  creatorId String
  posts     Post[]
}

model Label {
  id          String      @id @default(uuid())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  title       String
  color       String      @default("fff")
  description String?
  creator     User        @relation(fields: [creatorId], references: [id])
  creatorId   String
  posts       Post[]
  profile     UserProfile @relation(fields: [profileId], references: [id])
  profileId   String
}

model Organization {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  owner     User     @relation("UserOwnedOrganizationsRelation", fields: [ownerId], references: [id])
  ownerId   String
  employees User[]
}

model Post {
  id          String        @id @default(uuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now())
  title       String
  description String?
  type        PostType
  likers      User[]        @relation("UserLikedPostsRelation")
  likes       BigInt        @default(0)
  comments    PostComment[]
  attachments Attachment[]
  hashtags    Hashtag[]
  labels      Label[]
  creator     User          @relation("UserOwnedPostsRelation", fields: [creatorId], references: [id])
  creatorId   String
}

model PostComment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  body      String
  creator   User     @relation(fields: [creatorId], references: [id])
  creatorId String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  edited    Boolean  @default(false)
  likers    User[]   @relation("UserLikedCommentsRelation")
  likes     BigInt   @default(0)
}

model Session {
  id         String    @id @default(uuid())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  provider   String?   @default("Unknown")
  device     String?   @default("Unknown")
  userAgent  String
  ip         String
  lastLogged DateTime?
  user       User      @relation(fields: [userId], references: [id])
  userId     String
  isCurrent  Boolean   @default(false)
}

model TokenPair {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  accessToken  String   @unique 
  refreshToken String   @unique

  // Connection user

  user   User   @relation(fields: [userId], references: [id])
  userId String

  // Expiry

  isExpired Boolean @default(false)
}

model User {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  displayName String?  @default("")
  username    String   @unique
  email       String
  password    String?
  isLocal     Boolean  @default(true)
  role        Role?    @default(value: user)

  // Authentication

  count    Int         @default(0)
  tokens   TokenPair[]
  sessions Session[]

  // Profile
  profile   UserProfile? @relation("UserProfileRelation", fields: [profileId], references: [id])
  profileId String?      @unique

  // Organizations
  ownedOrganizations  Organization[] @relation("UserOwnedOrganizationsRelation")
  joinedOrganizations Organization[]

  // Posts

  posts               Post[]        @relation("UserOwnedPostsRelation")
  likedPosts          Post[]        @relation("UserLikedPostsRelation")
  likedComments       PostComment[] @relation("UserLikedCommentsRelation")
  createdPostComments PostComment[]

  // Followers

  following User[] @relation("UserFollowRelation", references: [id])
  followers User[] @relation("UserFollowRelation", references: [id])

  // Labels

  createdLabels Label[]

  // Hashtags

  createdHashtags Hashtag[]

  // Errors

  errors       Error[]
}

model UserProfile {
  id        String        @id @default(uuid())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  user      User?         @relation("UserProfileRelation")
  settings  UserSettings? @relation("UserSettingsRelation")
  avatarURL String?
  bio       String?       @default("Bio has not been set yet!")
  labels    Label[]
}

model UserSettings {
  id            String      @id @default(uuid())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  userProfile   UserProfile @relation("UserSettingsRelation", fields: [userProfileId], references: [id])
  userProfileId String
  location      String?
  website       String?
}
