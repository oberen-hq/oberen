// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["mongoDb"]
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "../src/resolver-types"
}

enum ConnectionService {
  github
  google
  discord
  twitter
  facebook
  apple
  instagram
  linkedin
  local
}

enum AttachmentType {
  image
  video
  organization
  post
  other
}

enum BugReportSeverity {
  catastrophic
  critical
  high
  medium
  low
  info
}

enum Role {
  user
  staff
  admin
}

enum Status {
  online
  idle
  dnd
  other
  offline
}

enum PostType {
  post
  job
  organization
  shift
  article
  feedback
  poll
}

enum RequestType {
  bugReport
  userReport
  featureRequest
  ticket
}

enum ReportStatus {
  pending
  recieved
  rejected
  accepted
}

model OauthConnection {
  id                 String            @id @default(dbgenerated()) @map("_id") @db.ObjectId
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  oauthService       ConnectionService
  email              String
  username           String
  oauthServiceUserId String            @db.ObjectId
  isPrimary          Boolean

  // Connection user

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
}

model TokenPair {
  id           String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  accessToken  String   @unique
  refreshToken String   @unique

  // Connection user

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  // Expiry

  isExpired Boolean @default(false)
}

model User {
  id          String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isLocal     Boolean  @default(true)
  username    String   @unique
  displayName String   @default("")
  email       String   @unique
  password    String?
  userRole    Role?    @default(value: user)

  // Profile

  profile   UserProfile @relation("UserProfileRelation", fields: [profileId], references: [id])
  profileId String      @db.ObjectId

  // Posts

  posts           Post[]    @relation("UserOwnedPostsRelation")
  createdComments Comment[] @relation("UserCommentsRelation")
  likedPosts      Post[]    @relation("UserLikedPostsRelation")
  likedComments   Comment[] @relation("UserLikedCommentsRelation")

  // Followers

  following User[] @relation("UserFollowRelation", references: [id])
  followers User[] @relation("UserFollowRelation", references: [id])

  // Labels

  createdLabels Label[]

  // Attachments

  createdAttachments Attachment[]

  // Reporting system

  reports Report[]

  // Organizations

  // organizations       Organization[]  @relation("UserOwnedOrganizationsRelation")

  // Jobs

  // completedJobs       Job[]           @relation("UserCompletedJobs")
  // appliedJobs         JobApplicant[]

  // Shifts

  // completedShifts     Shift[]         @relation("UserCompletedShifts")
  // unavailableShifts   Shift[]

  // OauthConnections

  oauthConnections OauthConnection[]
  tokens           TokenPair[]
}

model UserProfile {
  id        String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
  updatedAt DateTime @updatedAt
  user      User?    @relation("UserProfileRelation")
  status    Status   @default(value: online)
  avatarUrl String?  @default("")
  bio       String?  @default("Something amazing to go here...")

  labels Label[]
}

model Post {
  id          String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  description String?
  type        PostType

  // Likes and Comments

  likers   User[]    @relation("UserLikedPostsRelation")
  comments Comment[]

  // TODO: Attachments and labels

  attachments Attachment[]

  // Creator

  creator   User   @relation("UserOwnedPostsRelation", fields: [creatorId], references: [id])
  creatorId String @db.ObjectId
}

model Comment {
  id        String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  body      String

  // Creator

  creator   User   @relation("UserCommentsRelation", fields: [creatorId], references: [id])
  creatorId String @db.ObjectId

  // Posts
  post   Post   @relation(fields: [postId], references: [id])
  postId String @db.ObjectId

  // Report

  report   Report @relation(fields: [reportId], references: [id])
  reportId String @db.ObjectId

  // Extras

  edited Boolean @default(false)
  likers User[]  @relation("UserLikedCommentsRelation")
  likes  Int     @default(0)
}

model Attachment {
  id            String         @id @default(dbgenerated()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  attachmentUrl String
  type          AttachmentType

  // Post

  post   Post?  @relation(fields: [postId], references: [id])
  postId String? @db.ObjectId

  // Report

  report   Report? @relation(fields: [reportId], references: [id])
  reportId String? @db.ObjectId

  // Creator

  creator   User         @relation(fields: [creatorId], references: [id])
  creatorId String       @db.ObjectId
}

model Label {
  id        String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Description

  name        String
  description String?

  // Incremental usage

  uses Int @default(0)

  // Creator

  creator   User         @relation(fields: [creatorId], references: [id])
  creatorId String       @db.ObjectId
  profile   UserProfile? @relation(fields: [profileId], references: [id])
  profileId String?      @db.ObjectId
}

model Report {
  id          String            @id @default(dbgenerated()) @map("_id") @db.ObjectId
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  name        String
  description String
  severity    BugReportSeverity @default(value: low)

  // Type

  type RequestType

  // Creator

  creator   User   @relation(fields: [creatorId], references: [id])
  creatorId String @db.ObjectId


  // Attachments

  attachments Attachment[]

  // Comments

  comments Comment[]

  // Extras

  status ReportStatus @default(value: pending)
}

model Organization {
  id String @id @default(dbgenerated()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Job {
  id String @id @default(dbgenerated()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JobApplicant {
  id String @id @default(dbgenerated()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Shift {
  id String @id @default(dbgenerated()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
