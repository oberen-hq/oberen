// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "../src/resolver-types"
}

enum ConnectionService {
  github
  google
  discord
  twitter
  facebook
  apple
  instagram
  linkedin
  local
}

enum AttachmentType {
  image
  video
  organization
  post
  other
}

enum BugReportSeverity {
  catastrophic
  critical
  high
  medium
  low
  info
}

enum Role {
  user
  staff
  admin
}

enum Status {
  online
  idle
  dnd
  other
  offline
}

enum PostType {
  post
  job
  organization
  shift
  article
  feedback
  poll
}

enum RequestType {
  bugReport
  userReport
  featureRequest
  ticket
}

enum ReportStatus {
  pending
  recieved
  rejected
  accepted
}

model Post {
  id                  String               @id @default(uuid())
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @default(now())
  title               String
  description         String?
  type                PostType
  likers              User[]               @relation("UserLikedPostsRelation")
  likes               BigInt               @default(0)
  comments            PostComment[]   
  attachments         Attachment[]  
  hashtags            Hashtag[]
  creator             User                @relation("UserOwnedPostsRelation", fields: [creatorId], references: [id])
  creatorId           String  
}

model PostComment {
  id                  String               @id @default(uuid())
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @default(now())
  body                String
  creator             User                 @relation(fields: [userId], references: [id])
  creatorId           String
  post                Post                 @relation(fields: [postId], references: [id])
  postId              String
  edited              Boolean              @default(false)
  likers              User[]               @relation("UserLikedCommentsRelation")
  likes               BigInt               @default(0)
  isReply             Boolean              @default(false)
  mentions            User[]
  replies             PostComment[]
}

model User {
  id                  String                @id @default(uuid())
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  displayName         String?               @default("")
  username            String                @unique
  email               String
  password            String?
  isLocal             Boolean               @default(true)
  role                Role?                 @default(value: user)

  // Profile         
  profile             UserProfile           @relation("UserProfileRelation", fields: [profileId], references: [id])
  profileId           String                

  // Posts

  posts               Post[]                @relation("UserOwnedPostsRelation")
  likedPosts          Post[]                @relation("UserLikedPostsRelation")
  likedComments       PostComment[]         @relation("UserLikedCommentsRelation")

  // Followers

  following           User[]                @relation("UserFollowRelation", references: [id])
  followers           User[]                @relation("UserFollowRelation", references: [id])

  // Labels

  createdLabels       Label[]

  // Attachments

  createdAttachments  Attachment[]
}

model UserProfile {
  id                  String                @id @default(uuid())
  user                User?                 @relation("UserProfileRelation")
  avatarURL           String
  bio                 String
  labels              Label[]
}

// model TokenPair {
//   id           String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
//   createdAt    DateTime @default(now())
//   updatedAt    DateTime @updatedAt
//   accessToken  String   @unique
//   refreshToken String?  @unique

//   // Connection user

//   user   User   @relation(fields: [userId], references: [id])
//   userId String @db.ObjectId

//   // Expiry

//   isExpired Boolean @default(false)
// }

// model User {
//   id          String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
//   isLocal     Boolean  @default(true)
//   username    String   @unique
//   displayName String   @default("")
//   email       String   @unique
//   password    String?
//   role        Role?    @default(value: user)

//   // Profile

//   profile   UserProfile @relation("UserProfileRelation", fields: [profileId], references: [id])
//   profileId String      @db.ObjectId

//   // Posts

//   posts           Post[]    @relation("UserOwnedPostsRelation")
//   createdComments Comment[] @relation("UserCommentsRelation")
//   likedPosts      Post[]    @relation("UserLikedPostsRelation")
//   likedComments   Comment[] @relation("UserLikedCommentsRelation")

//   // Followers

//   following User[] @relation("UserFollowRelation", references: [id])
//   followers User[] @relation("UserFollowRelation", references: [id])

//   // Labels

//   createdLabels Label[]

//   // Attachments

//   createdAttachments Attachment[]

//   // Reporting system

//   reports Report[]

//   // Organizations

//   // organizations       Organization[]  @relation("UserOwnedOrganizationsRelation")

//   // Jobs

//   // completedJobs       Job[]           @relation("UserCompletedJobs")
//   // appliedJobs         JobApplicant[]

//   // Shifts

//   // completedShifts     Shift[]         @relation("UserCompletedShifts")
//   // unavailableShifts   Shift[]

//   // OauthConnections

//   oauthConnections OauthConnection[]
//   tokens           TokenPair[]
// }

// model UserProfile {
//   id        String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
//   updatedAt DateTime @updatedAt
//   user      User?    @relation("UserProfileRelation")
//   status    Status   @default(value: online)
//   avatarUrl String?  @default("")
//   bio       String?  @default("Something amazing to go here...")

//   labels Label[]
// }
